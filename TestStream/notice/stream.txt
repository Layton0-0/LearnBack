
 1) 병렬 처리: 프로그램 내의 계산 영역을 여러개로 나누어 각각에 대한 계산을 여러 프로세서에서 동시에 수행하는 것 
 
 2) 집계, 연산, 파일 입출력을 Stream API에서 제공되며 병렬 처리를 할 수 있는 클래스와 메소드를 제공한다.
 	java.util.stream -> 배열, Collection(java.util.*)
 	배열, Collection을 이용한 -> 집계연산을 하려면 -> java.util.stream을 사용한다.
 	
 3) 방법: java.util.stream.Stream의 of(), 
 		 java.util.Collection의 stream()를 통해서 대상 객체를 스트림으로 바꾸게 되면 Map, Reduce등의 집계연산을 할 수 있다.
 		 
 4)주요 출력 메소드  
   4-1. forEach (Consumer <? super T> consumer) : 
   Stream의 각 요소를 consumer가 인수로 처리한다.
   병렬로 사용하면 원래 데이터가 List와 같은 집합체에서 순서를 보장하지 않는다  
   
   4-2. forEachOrdered (Consumer <? super T> consumer) : 
         Stream의 객체요소를 consumer가 순서대로  매개 인수를 처리한다.
 
 5) Stream, java.util.Collection = 집합체를 관리 공통점
 
 	Collection: 요소 관리를 목적
 	Stream: 요소의 값을 사용해서 어떤 결과를 검색하고 처리하는 것이 목적(MR)
 			Map(중간처리: 조건에 맞는 검색, 다른 데이터 형식으로 리턴 = filter, limit, distinct, map, flatMap)
 			Reduce(최종처리: Map에서 리턴한 결과를 가지고 최종처리 = 집계함수)
 			
 			select ename, sal, deptno, count( *)
 			from emp
 			where sal >= 3000 (Map 작업)
 			group by dept no = 20;
 			
 6) Stream<T> filter(Predicate<? super T> predicate
 						boolean test(T)
 						
 						
 7) 
 	7-1) map: <R> Stream<R>	map(Function<? super T,? extends R> mapper)
 							R apply(T t)
 							-> 지정된 값을 변경한 새로운 Stream으로 값을 리턴한다.
 	7-2) flatMap: <R> Stream<R>	flatMap(Function<? super T,? extends Stream<? extends R>> mapper)
 	 						void accept(T t)
 	 						-> 입력된 값을 복수개의 R로 리턴한다. 입력받은 객체가 리턴하는 map메소드로 만들어진 Stream은 자동으로 close된다.
 	7-3) peek: Stream<T>	peek(Consumer<? super T> action)
 	 						R apply(T t)
 	 						-> 	입력받은 값을 변환 작업의 테스트 용도로 사용.
 	 							디버깅 용으로 어떤 값이 있는지 확인하고 싶을 때 사용
 	 	ex) 컬렉션의 객체를 병렬 연산한 후 다시 컬렉션으로 되돌리고 싶을 때.
 	 	 	collection -> Stream(M, R) -> Collection
 	 				.stream()		.collect
 	 						
 8) Reduce 종단형 처리계의 주요 메소드: max, min, findFirst, findAny, reduce 등
 		Optional<T>로 리턴된다.
 		
 9) Reduce 종단형 처리계의 탐색용 주요 메소드: allMatch, anyMatch, noneMatch 등은 boolean으로 리턴된다.
 
 10) Reduce 종단형 처리계의 주요 메소드: sum(), count()는 래퍼로 리턴된다.
 